// datasource db defines the database connection settings.
// It is configured for PostgreSQL and uses an environment variable for the connection URL.
// The 'extensions' feature enables the use of PostgreSQL-specific data types.
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

// generator db configures Prisma Client settings.
// It is set up to use Prisma Client Python with asyncio interface and specific features.
generator db {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
  previewFeatures      = ["postgresqlExtensions"]
}

model User {
  id             String   @id @default(dbgenerated("gen_random_uuid()"))
  email          String   @unique
  hashedPassword String
  role           Role     @default(USER)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  ApiKeys       ApiKey[]
  PhotoRequests PhotoRequest[]
  ErrorLogs     ErrorLog[]
  AuditLogs     AuditLog[]     @relation("UserAuditLogs")
  Subscriptions Subscription[]
}

model ApiKey {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  key       String   @unique
  service   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PhotoRequest {
  id        String      @id @default(dbgenerated("gen_random_uuid()"))
  request   String
  imageUrl  String?
  source    PhotoSource
  userId    String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  cacheId   String?

  // Relations
  User  User?  @relation(fields: [userId], references: [id], onDelete: SetNull)
  Cache Cache? @relation(fields: [cacheId], references: [id], onDelete: SetNull)
}

model Cache {
  id            String         @id @default(dbgenerated("gen_random_uuid()"))
  key           String         @unique
  value         String
  createdAt     DateTime       @default(now())
  expiresAt     DateTime
  photoRequests PhotoRequest[]
}

model RateLimit {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  identifier String   @unique
  calls      Int
  limit      Int
  resetAt    DateTime
  createdAt  DateTime @default(now())
}

model ErrorLog {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  message   String
  details   Json?
  createdAt DateTime @default(now())
  userId    String?

  // Relations
  User User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model AuditLog {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  action    String
  byUserId  String?
  details   Json?
  createdAt DateTime @default(now())

  // Relations
  ByUser User? @relation("UserAuditLogs", fields: [byUserId], references: [id], onDelete: SetNull)
}

model Subscription {
  id        String             @id @default(dbgenerated("gen_random_uuid()"))
  userId    String
  startedAt DateTime           @default(now())
  endsAt    DateTime
  status    SubscriptionStatus
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  // Relations
  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum PhotoSource {
  UNSPLASH
  PEXELS
}

enum Role {
  ADMINISTRATOR
  USER
  PREMIUMUSER
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

